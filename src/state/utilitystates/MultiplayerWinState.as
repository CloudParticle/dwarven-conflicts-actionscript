package state.utilitystates{		//------------------------------------------------------------------------------	//	// Imports	//	//------------------------------------------------------------------------------	import flash.display.MovieClip;	import flash.text.TextField;		import gamesound.Sounds;		import math.Grid;		import se.lnu.mediatechnology.stickossdk.application.State;	import se.lnu.mediatechnology.stickossdk.core.Session;		import ui.UserInterface;

	//------------------------------------------------------------------------------	//	// Public class	//	//------------------------------------------------------------------------------	/**	 *	 *	The after screen for when a player wins multiplayer.  This state merely displays who won the round	 * 	and shows some statistics from that round. 	 * 	 *	@author		PÃ¤r Strandberg	 *	@version 	1.0	 *	 */	public class MultiplayerWinState extends State	{		//------------------------------------------------------------------------------		//		// Private properties		//		//------------------------------------------------------------------------------		private var _multiWinState		:MovieClip		= new mc_state();		private var _winText			:MovieClip 		= new text_largeText();		private var _playerColor		:MovieClip 		= new multiWin_playerColor();			private var _controlsEnabled	:Boolean 		= false;		private var _background			:MovieClip		= new mc_background();		private var _red				:String			= "0xFF0000";		private var _yellow				:String			= "0xF5E729";		private var _green				:String			= "0x33CC33";		private var _blue				:String			= "0x0066CC";		private var _stateHeader		:uint 			= 50;		private var _winner				:uint;		private var _ui					:UserInterface;		private var _playerLog			:Array;		private var _playerWoodCount	:Array;		private var _checkValue			:String		private var _sounds:Sounds;		//------------------------------------------------------------------------------		//		// Constructor method		//		//------------------------------------------------------------------------------		/**		 * 		 *	The class constructor.		 * 		 *  @param theWinner	The number of the winning player. (0 = p1, 1 = p2)		 *	@return void		 * 		 */		public function MultiplayerWinState($theWinner:uint, $ui:UserInterface):void		{			_ui 	= $ui;			_winner	= $theWinner;		}		//------------------------------------------------------------------------------		//		// Override public methods		//		//------------------------------------------------------------------------------		/**		 * 		 *	This method is executed when the state is ready for use.		 * 		 *	@return void		 * 		 */		override public function init():void		{						_sounds = new Sounds();			Session.sound.play("fanfare");			initState();			initLogCount();			addLogs();			addWinnerText();			Session.application.state.setPause(3, enableControls);		}				/**		 * 		 *	This method runs automatically for each frame.  		 * 		 *	@return void		 * 		 */		override public function update():void 		{			if(_controlsEnabled){				updateControls();			}		}				/**		 * 		 *	Use this method to clean up the class before it is removed. 		 * 	Remove event listeners here. 		 * 		 *	@return void		 * 		 */		override public function dealloc():void 		{			trace("dealloc from multiplayerWinState");			_ui.dealloc();			super.dealloc();			removeChild			(_multiWinState);			removeChild			(_playerColor);			removeChild			(_background);			_multiWinState 		= null;			_winText			= null;			_playerColor		= null;			_ui					= null;			_playerWoodCount 	= null;			_playerLog			= null;			_sounds 			= null;			_background			= null;		}				//------------------------------------------------------------------------------		//		// Private methods		//		//------------------------------------------------------------------------------				/**		 * 		 *	Initiates the graphic layout of this state.  		 * 		 *	@return void		 * 		 */		private function initState():void 		{			_multiWinState.gotoAndStop	("multiWin");						addChild					(_multiWinState);			addChild(_background);			_background.gotoAndStop(_ui.background);		}				/**		 * 		 *	Establishes the 2 players post round log count and 		 * 	enables the graphic representation of this and a numerical		 * 	representation. 		 * 		 *	@return void		 * 		 */		private function initLogCount():void 		{			_playerColor.p1_score.text	=	_ui.playerOne.woodCount;				_playerColor.p2_score.text 	=	_ui.playerTwo.woodCount;								_playerColor.gotoAndStop	(0);						_playerColor.p1.gotoAndStop	(_ui.playerOne.playerColor);				_playerColor.p2.gotoAndStop	(_ui.playerTwo.playerColor);			addChild					(_playerColor);						_playerColor.x 				= Grid.STAGE_WIDTH / 2;			_playerColor.y				= _stateHeader;		}				/**		 * 		 *	Applies the log representation and count established by initLogCount()		 * 	and applies them to the banner in the state dependant on the players 		 * 	color and final wood score.  		 * 		 *	@return void		 * 		 */		private function addLogs():void		{			_playerLog 			= new Array(_playerColor.p1_log		,	_playerColor.p2_log);			_playerWoodCount 	= new Array(_ui.playerOne.woodCount	,	_ui.playerTwo.woodCount);					for (var i:int = 0; i < _playerLog.length; i++) {				if 		(_playerWoodCount[i] > 7) 	{_playerLog[i].gotoAndStop(3);} 				else if (_playerWoodCount[i] > 3)	{_playerLog[i].gotoAndStop(2);} 				else if (_playerWoodCount[i] > 0)	{_playerLog[i].gotoAndStop(1);} 				else 	{_playerLog[i].gotoAndStop(4);} 			}		}				/**		 * 		 *	Establishes the decleration of the winner in text form and adds this		 * 	to this stage and positions it.  		 * 		 *	@return void		 * 		 */		private function addWinnerText():void 		{			_winner++;			_winText.winnerText.text 		= "Player "+ _winner +"\nwins!";			_winText.winnerText.textColor 	= getPlayerFontColor();				_winText.x						= Grid.STAGE_WIDTH	/ 2;			_winText.y						= Grid.STAGE_HEIGHT / 2;			addChild						(_winText);		}				/**		 * 		 *	Retreives the hex color code for the winning player.  		 * 		 *	@return _checkValue:String	The color in hex code of the winning player. 		 * 		 */		private function getPlayerFontColor():String 		{			if 		(_winner == 1) 	_checkValue = _ui.playerOne.playerColor;			else if (_winner == 2) 	_checkValue = _ui.playerTwo.playerColor;						switch(_checkValue){				case "red": 		_checkValue = _red; 	break;				case "blue": 		_checkValue = _blue; 	break;				case "yellow": 		_checkValue = _yellow;	break;				case "green": 		_checkValue = _green;	break;			}						return _checkValue;		}				/**		 * 		 *	This method handles the keyboard commands for this state.		 * 		 *	@return void		 * 		 */		private function updateControls():void		{			if(keyboard.anyKeyIsPressed()){				state = new MenuState();			}		}				/**		 * 		 *	Enables controls for this class.  		 * 		 *	@return void		 * 		 */		private function enableControls():void		{			_controlsEnabled = true;		}	}}