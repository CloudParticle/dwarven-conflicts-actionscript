package state.utilitystates{		//------------------------------------------------------------------------------	//	// Imports	//	//------------------------------------------------------------------------------		import flash.display.MovieClip;		import gamesound.Sounds;		import se.lnu.mediatechnology.stickossdk.application.State;	import se.lnu.mediatechnology.stickossdk.core.Session;	import se.lnu.mediatechnology.stickossdk.input.Controls;	import se.lnu.mediatechnology.stickossdk.input.SuperControls;		import utils.Register;
	//------------------------------------------------------------------------------	//	// Public class	//	//------------------------------------------------------------------------------		/**	 *	 *	The menu state of Dwarven Conflicts.  Access this state to come to the menu where	 * 	the user can choose between game modes and highscore.  	 * 	 *	@author		Chris Shields	 *	@version 	1.0	 *	 */	public class MenuState extends State	{		//------------------------------------------------------------------------------		//		// Private properties		//		//------------------------------------------------------------------------------		private var _menuState		:MovieClip 		= new mc_state();		private var _superControls	:SuperControls	= new SuperControls();		private var _vert			:int 			= 0;		private var _horz			:int 			= 0;		private var _chosenState	:int;		private var _sounds			:Sounds; 		private var deallocBug		:Boolean 		= false;		//------------------------------------------------------------------------------		//		// Constructor method		//		//------------------------------------------------------------------------------		/**		 * 		 *	The class constructor.		 * 		 *	@return void		 * 		 */		public function MenuState():void		{		}				//------------------------------------------------------------------------------		//		// Override public methods		//		//------------------------------------------------------------------------------				/**		 * 		 *	This method is executed when the state is ready for use.  MenuState MC added here		 * 	Sounds also initiated for this state.  		 * 		 *	@return void		 * 		 */		public override function init():void		{			addChild				(_menuState);			_menuState.gotoAndStop	("menuState");			_sounds  = new Sounds	("menu");		}				/**		 * 		 *	This method runs automatically for each frame.  Updates the 		 * 	controls and gives visual funcitonality to the menu screen.  		 * 		 *	@return void		 * 		 */		public override function update():void		{				super.update();						updateControls();							if(deallocBug){				return;			}						if(_vert == 0 && _horz == 0){				_menuState.menu.gotoAndStop	("single");				_chosenState = 1;			}			if(_vert == 0 && _horz == 1){				_menuState.menu.gotoAndStop	("multi");				_chosenState = 2;			}			if(_vert == 1 && _horz == 0){				_menuState.menu.gotoAndStop	("highscore");				_chosenState = 3;			}			if(_vert == 1 && _horz == 1){				_menuState.menu.gotoAndStop	("credits");				_chosenState = 4;			}			if(_vert == 2){				_menuState.menu.gotoAndStop	("story");				_chosenState = 5;			}		}				/**		 * 		 *	Cleans the class		 * 		 *	@return void		 * 		 */		public override function dealloc():void		{			Register.roundOnePoints 	= 0;			Register.roundTwoPoints		= 0;			Register.roundThreePoints 	= 0;			Register.totalTimeSpent 	= 0;			trace("dealloc from menuState");			super.dealloc(); 			Session.sound.stopAll();			removeChild(_menuState);			deallocBug 		= true;			_menuState 		= null;			_superControls 	= null;			_sounds			= null;					}				//------------------------------------------------------------------------------		//		// Private methods		//		//------------------------------------------------------------------------------				/**		 * 		 *	This method handles the keyboard commands for this state.		 * 		 *	@return void		 * 		 */				private function updateControls():void		{			if(keyboard.pressedOnce(Controls.UNIVERSAL_START_1)){				_chosenState = 1;				goState();				return			}			if(keyboard.pressedOnce(Controls.UNIVERSAL_START_2)){				_chosenState = 2;				goState();				return			}						if(	keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_1) ||				keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_2) ||				keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_3) ||				keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_4) ||				keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_5) ||				keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_6) ||				keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_7) ||				keyboard.pressedOnce	(_superControls.PLAYER_BUTTON_8)){				goState();				return			}												if(keyboard.pressedOnce(Controls.PLAYER_1_LEFT))	{ Session.sound.play("menuMove"); 	_horz = 0; }			if(keyboard.pressedOnce(Controls.PLAYER_1_RIGHT))	{ Session.sound.play("menuMove");	_horz = 1; }			if(keyboard.pressedOnce(Controls.PLAYER_1_UP))		{ Session.sound.play("menuMove");	_vert = _vert-1; }			if(keyboard.pressedOnce(Controls.PLAYER_1_DOWN))	{ Session.sound.play("menuMove");	_vert = _vert+1; }			if(_vert > 2){_vert = 2}			if(_vert < 0){_vert = 0}		}		/**		 * 		 *	This method switchboards the different states depending		 * 	on the users input.  		 * 		 *	@return void		 * 		 */		private function goState():void		{						switch(_chosenState){				case 1:					state = new SinglePlayerInstructions();					break;				case 2:					state = new MultiPlayerInstructions();					break;				case 3:					state = new HighScoreState();					break;				case 4:					state = new CreditsState();					break;				case 5:					state = new Story();					break;			}		}	}}